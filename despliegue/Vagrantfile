
#REFERENCE: https://gist.github.com/arbabnazar/ccf020f03c599ae35cfb/

# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  config.vm.box = "dummy"
  config.vm.synced_folder ".", "/vagrant", disabled: true



   config.vm.define :bot do |bot|
     bot.vm.host_name = "bot"

     bot.vm.provider :aws do |aws, override|
        aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
        aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
        aws.region = "eu-west-1"
        aws.availability_zone = "eu-west-1a"

        # AMI from which we'll launch EC2 Instance
        aws.ami =  "ami-a192bad2" # Ubuntu 16.04.1
        aws.keypair_name = ENV['AWS_KEYNAME']
        aws.instance_type = "t2.micro"
        aws.security_groups = [ENV['AWS_SECURITY_GROUP_NAME']]
        aws.tags = {
   		'Name' => 'Lecrin_Bot bot Instance',
   		'Environment' => 'vagrant-sandbox'
   		}
       # Credentials to login to EC2 Instance
       override.ssh.username = "ubuntu"
       override.ssh.private_key_path = ENV['AWS_KEYPATH']


     end

     #Provisioners configuration
     #bot.vm.provision :shell, :path => "installPythonUbuntu16.sh"
     bot.vm.provision :ansible do |ansible|
        ansible.playbook = "playbook_bot.yml"
        #ansible.verbose = "v"
        #ansible.host_key_checking = false
        # Disable default limit to connect to all the machines
        #ansible.limit = 'all'
     end
   end

   config.vm.define :categorias do |categorias|
     categorias.vm.host_name = "categorias"

     categorias.vm.provider :aws do |aws, override|
        aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
        aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
        aws.region = "eu-west-1"
        aws.availability_zone = "eu-west-1a"

        # AMI from which we'll launch EC2 Instance
        aws.ami =  "ami-a192bad2" # Ubuntu 16.04.1
        aws.keypair_name = ENV['AWS_KEYNAME']
        aws.instance_type = "t2.micro"
        aws.security_groups = [ENV['AWS_SECURITY_GROUP_NAME']]
        aws.tags = {
      'Name' => 'Lecrin_Bot categorias Instance',
      'Environment' => 'vagrant-sandbox'
      }
       # Credentials to login to EC2 Instance
       override.ssh.username = "ubuntu"
       override.ssh.private_key_path = ENV['AWS_KEYPATH']


     end

     #Provisioners configuration
     #categorias.vm.provision :shell, :path => "installPythonUbuntu16.sh"
     categorias.vm.provision :ansible do |ansible|
        ansible.playbook = "playbook-categorias-noticias.yml"
        #ansible.verbose = "v"
        #ansible.host_key_checking = false
        # Disable default limit to connect to all the machines
        #ansible.limit = 'all'
     end
   end

   config.vm.define :estadisticas do |estadisticas|
     estadisticas.vm.host_name = "estadisticas"

     estadisticas.vm.provider :aws do |aws, override|
        aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
        aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
        aws.region = "eu-west-1"
        aws.availability_zone = "eu-west-1a"

        # AMI from which we'll launch EC2 Instance
        aws.ami =  "ami-a192bad2" # Ubuntu 16.04.1
        aws.keypair_name = ENV['AWS_KEYNAME']
        aws.instance_type = "t2.micro"
        aws.security_groups = [ENV['AWS_SECURITY_GROUP_NAME']]
        aws.tags = {
      'Name' => 'Lecrin_Bot estadisticas Instance',
      'Environment' => 'vagrant-sandbox'
      }
       # Credentials to login to EC2 Instance
       override.ssh.username = "ubuntu"
       override.ssh.private_key_path = ENV['AWS_KEYPATH']


     end

     #Provisioners configuration
     #estadisticas.vm.provision :shell, :path => "installPythonUbuntu16.sh"
     estadisticas.vm.provision :ansible do |ansible|
        ansible.playbook = "playbook-estadisticas.yml"
        #ansible.verbose = "v"
        #ansible.host_key_checking = false
        # Disable default limit to connect to all the machines
        #ansible.limit = 'all'
     end
   end
end
